/*
 * Add your dependencies here. Supported configurations:
 *  - api("group:name:version:classifier"): if you use the types from this dependency in the public API of this mod
 *       Available at runtime and compiletime for mods depending on this mod
 *  - implementation("g:n:v:c"): if you need this for internal implementation details of the mod, but none of it is visible via the public API
 *       Available at runtime but not compiletime for mods depending on this mod
 *  - compileOnly("g:n:v:c"): if the mod you're building doesn't need this dependency during runtime at all, e.g. for optional mods
 *       Not available at all for mods depending on this mod, only visible at compiletime for this mod
 *  - compileOnlyApi("g:n:v:c"): like compileOnly, but also visible at compiletime for mods depending on this mod
 *       Available at compiletime but not runtime for mods depending on this mod
 *  - runtimeOnlyNonPublishable("g:n:v:c"): if you want to include a mod in this mod's runClient/runServer runs, but not publish it as a dependency
 *       Not available at all for mods depending on this mod, only visible at runtime for this mod
 *  - devOnlyNonPublishable("g:n:v:c"): a combination of runtimeOnlyNonPublishable and compileOnly for dependencies present at both compiletime and runtime,
 *       but not published as Maven dependencies - useful for RFG-deobfuscated dependencies or local testing
 *  - runtimeOnly("g:n:v:c"): if you don't need this at compile time, but want it to be present at runtime
 *       Available at runtime for mods depending on this mod
 *  - annotationProcessor("g:n:v:c"): mostly for java compiler plugins, if you know you need this, use it, otherwise don't worry
 *  - testCONFIG("g:n:v:c") - replace CONFIG by one of the above (except api), same as above but for the test sources instead of main
 *
 *  - shadowImplementation("g:n:v:c"): effectively the same as API, but the dependency is included in your jar under a renamed package name
 *       Requires you to enable usesShadowedDependencies in gradle.properties
 *
 *  - compile("g:n:v:c"): deprecated, replace with "api" (works like the old "compile") or "implementation" (can be more efficient)
 *
 * You can exclude transitive dependencies (dependencies of the chosen dependency) by appending { transitive = false } if needed,
 * but use this sparingly as it can break using your mod as another mod's dependency if you're not careful.
 *
 * To depend on obfuscated jars you can use `devOnlyNonPublishable(rfg.deobf("dep:spec:1.2.3"))` to fetch an obfuscated jar from maven,
 * or `devOnlyNonPublishable(rfg.deobf(project.files("libs/my-mod-jar.jar")))` to use a file.
 *
 * Gradle names for some of the configuration can be misleading, compileOnlyApi and runtimeOnly both get published as dependencies in Maven, but compileOnly does not.
 * The buildscript adds runtimeOnlyNonPublishable to also have a runtime dependency that's not published.
 *
 * For more details, see https://docs.gradle.org/8.0.1/userguide/java_library_plugin.html#sec:java_library_configurations_graph
 */
dependencies {
    implementation("com.github.GTNewHorizons:GTNHLib:0.6.39:dev") { transitive = false }

    devOnlyNonPublishable(rfg.deobf("curse.maven:dragonapi-235591:4722480"))
    devOnlyNonPublishable(rfg.deobf("curse.maven:chromaticraft-235590:4721192"))
    devOnlyNonPublishable(rfg.deobf("curse.maven:cavecontrol-235605:4721202"))
    devOnlyNonPublishable(rfg.deobf("curse.maven:satisforestry-430986:4721194"))
    devOnlyNonPublishable(rfg.deobf("curse.maven:rotarycraft-235596:4721191"))
    devOnlyNonPublishable(rfg.deobf("curse.maven:reactorcraft-235593:4721203"))
    devOnlyNonPublishable(rfg.deobf("curse.maven:void-monster-235609:4721208"))

    compileOnly(rfg.deobf(project.files("libs/DragonRealmCore 1.7.10 V33a.jar")))

    devOnlyNonPublishable("com.github.GTNewHorizons:CodeChickenCore:1.4.7:dev") { transitive = false }
    devOnlyNonPublishable("com.github.GTNewHorizons:NotEnoughItems:2.7.90-GTNH:dev") { transitive = false }
    devOnlyNonPublishable("com.github.GTNewHorizons:waila:1.8.14:dev") { transitive = false }

    // Reika mods required for dev env
            // Optional runtime dependencies - only loaded if files exist
            //if (file("libs/1.7.10_AM2-1.4.0.009.jar").exists()) {
            //    runtimeOnly(rfg.deobf(project.files("libs/1.7.10_AM2-1.4.0.009.jar")))
            //}
            //if (file("libs/AnimationAPI-1.7.10-1.2.4.jar").exists()) {
            //    runtimeOnly(rfg.deobf(project.files("libs/AnimationAPI-1.7.10-1.2.4.jar")))
            //}
            //if (file("libs/mystcraft-1.7.10-0.12.3.04.jar").exists()) {
            //    runtimeOnly(rfg.deobf(project.files("libs/mystcraft-1.7.10-0.12.3.04.jar")))
            //}
            //if (file("libs/PneumaticCraft-1.7.10-1.12.7-152-universal.jar").exists()) {
            //    runtimeOnly(rfg.deobf(project.files("libs/PneumaticCraft-1.7.10-1.12.7-152-universal.jar")))
            //}
            //if (file("libs/BiomesOPlenty-1.7.10-2.1.0.2308-universal.jar").exists()) {
            //    runtimeOnly(rfg.deobf(project.files("libs/BiomesOPlenty-1.7.10-2.1.0.2308-universal.jar")))
            //}
            //if (file("libs/ProjectE-1.7.10-PE1.10.1.jar").exists()) {
            //    runtimeOnly(rfg.deobf(project.files("libs/ProjectE-1.7.10-PE1.10.1.jar")))
            //}
            //runtimeOnly("thaumcraft:Thaumcraft:1.7.10-4.2.3.5:dev") { transitive = false }
            //runtimeOnly("com.github.GTNewHorizons:Botania:1.12.26-GTNH:dev") { transitive = false }
            //runtimeOnly("com.github.GTNewHorizons:Baubles-Expanded:2.1.15-GTNH:dev") { transitive = false }
            //runtimeOnly("com.github.GTNewHorizons:ForestryMC:4.10.17:dev") { transitive = false }
            //runtimeOnly("com.github.GTNewHorizons:BloodMagic:1.7.51:dev") { transitive = false }
            //runtimeOnly("com.github.GTNewHorizons:BuildCraft:7.1.44:dev") { transitive = false }
            //runtimeOnly('net.industrial-craft:industrialcraft-2:2.2.828-experimental:dev') { transitive = false }


    //runtimeOnly("com.github.GTNewHorizons:Opis:1.4.6-mapless:dev") { transitive = false }

    //if (file("libs/falsepatternlib-mc1.7.10-1.9.1-dev.jar").exists()
    //  && file("libs/endlessids-mc1.7.10-1.6.13-dev.jar").exists()
    //  && file("libs/chunkapi-mc1.7.10-0.7.0-alpha-01-dev.jar").exists()) {
    //    runtimeOnly(files("libs/falsepatternlib-mc1.7.10-1.9.1-dev.jar"))
    //    runtimeOnly(files("libs/endlessids-mc1.7.10-1.6.13-dev.jar"))
    //    runtimeOnly(files("libs/chunkapi-mc1.7.10-0.7.0-alpha-01-dev.jar"))
    //}

}
